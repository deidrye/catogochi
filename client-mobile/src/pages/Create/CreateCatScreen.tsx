import React, { useState } from 'react';
import { View, Text, TextInput, Button, StyleSheet, Alert } from 'react-native';
import { Picker } from '@react-native-picker/picker';
import { NativeStackNavigationProp } from '@react-navigation/native-stack';
import { RootStackParamList } from '@/app/types/navigation';
import { useAuth } from '@/hooks/useAuth';
import { CatService } from '@/entities/cat/api/catService';

type CreateCatScreenNavigationProp = NativeStackNavigationProp<RootStackParamList, 'CreateCat'>;

interface CreateCatScreenProps {
  navigation: CreateCatScreenNavigationProp;
}

type CatBreed =
  | '–°–∏–∞–º—Å–∫–∞—è'
  | '–ü–µ—Ä—Å–∏–¥—Å–∫–∞—è'
  | '–ú–µ–π–Ω-–∫—É–Ω'
  | '–ë—Ä–∏—Ç–∞–Ω—Å–∫–∞—è'
  | '–°—Ñ–∏–Ω–∫—Å'
  | '–®–æ—Ç–ª–∞–Ω–¥—Å–∫–∞—è –≤–∏—Å–ª–æ—É—Ö–∞—è'
  | '–î—Ä—É–≥–∞—è'; // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å '–î—Ä—É–≥–∞—è' –Ω–∞ '–î—Ä—É–≥–∞—è'

interface CatState {
  name: string;
  color: string;
  breed: CatBreed;
}

export default function CreateCatScreen({ navigation }: CreateCatScreenProps) {
  const { user } = useAuth();
  const [cat, setCat] = useState<CatState>({
    name: '',
    color: '',
    breed: '–°–∏–∞–º—Å–∫–∞—è',
  });

  const [isLoading, setIsLoading] = useState(false);

  const catBreeds: CatBreed[] = [
    '–°–∏–∞–º—Å–∫–∞—è',
    '–ü–µ—Ä—Å–∏–¥—Å–∫–∞—è',
    '–ú–µ–π–Ω-–∫—É–Ω',
    '–ë—Ä–∏—Ç–∞–Ω—Å–∫–∞—è',
    '–°—Ñ–∏–Ω–∫—Å',
    '–®–æ—Ç–ª–∞–Ω–¥—Å–∫–∞—è –≤–∏—Å–ª–æ—É—Ö–∞—è',
    '–î—Ä—É–≥–∞—è', // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å '–î—Ä—É–≥–∞—è' –Ω–∞ '–î—Ä—É–≥–∞—è'
  ];

  const breedImages: Record<CatBreed, string> = {
    –°–∏–∞–º—Å–∫–∞—è: 'üê±',
    –ü–µ—Ä—Å–∏–¥—Å–∫–∞—è: 'üêà',
    '–ú–µ–π–Ω-–∫—É–Ω': 'üêØ',
    –ë—Ä–∏—Ç–∞–Ω—Å–∫–∞—è: 'üòº',
    –°—Ñ–∏–Ω–∫—Å: 'üëΩ',
    '–®–æ—Ç–ª–∞–Ω–¥—Å–∫–∞—è –≤–∏—Å–ª–æ—É—Ö–∞—è': 'üòæ',
    –î—Ä—É–≥–∞—è: 'üòª', // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å '–î—Ä—É–≥–∞—è' –Ω–∞ '–î—Ä—É–≥–∞—è'
  };

  const handleInputChange = (name: keyof CatState, value: string) => {
    setCat((prev) => ({
      ...prev,
      [name]: value,
    }));
  };

  const handleSubmit = async () => {
    try {
      navigation.navigate('Main');
      setIsLoading(true);

      if (!user?.user?.id) {
        // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω');
      }

      const catData = {
        name: cat.name,
        color: cat.color,
        breed: cat.breed,
        userId: user.user.id,
        angry: 100,
        hp: 100,
        energy: 100,
        affection: 100,
        boldness: 100,
        level: 1,
      };

      const createdCat = await CatService.createCat(catData);

      if (!createdCat) {
        throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ç–∞');
      }

      Alert.alert('–£—Å–ø–µ—Ö', '–ö–æ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!', [
        {
          text: 'OK',
          onPress: () => navigation.navigate('Main'),
        },
      ]);
    } catch (error) {
      console.error('Error creating cat:', error);
      Alert.alert(
        '–û—à–∏–±–∫–∞',
        error instanceof Error ? error.message : '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∫–æ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.',
      );
    } finally {
      setIsLoading(false);
    }
  };

  const getCatStyle = () => ({
    fontSize: 100,
    textAlign: 'center' as const,
    marginVertical: 20,
    transform: cat.breed === '–ú–µ–π–Ω-–∫—É–Ω' ? [{ scale: 1.5 }] : [{ scale: 1 }],
  });

  return (
    <View style={styles.container}>
      <Text style={styles.title}>–°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–æ—Ç–∞</Text>

      <Text style={getCatStyle()}>{breedImages[cat.breed]}</Text>

      <View style={styles.inputGroup}>
        <Text style={styles.label}>–ò–º—è –∫–æ—Ç–∞:</Text>
        <TextInput
          style={styles.input}
          value={cat.name}
          onChangeText={(text) => handleInputChange('name', text)}
          placeholder='–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–æ—Ç–∞'
        />
      </View>

      <View style={styles.inputGroup}>
        <Text style={styles.label}>–¶–≤–µ—Ç –∫–æ—Ç–∞:</Text>
        <TextInput
          style={styles.input}
          value={cat.color}
          onChangeText={(text) => handleInputChange('color', text)}
          placeholder='–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç –∫–æ—Ç–∞'
        />
      </View>

      <View style={styles.inputGroup}>
        <Text style={styles.label}>–ü–æ—Ä–æ–¥–∞ –∫–æ—Ç–∞:</Text>
        <Picker
          selectedValue={cat.breed} // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å cat.breed –Ω–∞ cat.breed
          style={styles.picker}
          onValueChange={(itemValue: CatBreed) => handleInputChange('breed', itemValue)}
        >
          {catBreeds.map((breed, index) => (
            <Picker.Item key={index} label={breed} value={breed} /> // –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ —Å breed –Ω–∞ breed
          ))}
        </Picker>
      </View>

      <Button
        title={isLoading ? '–°–æ–∑–¥–∞–Ω–∏–µ...' : '–°–æ–∑–¥–∞—Ç—å –∫–æ—Ç–∞'}
        onPress={handleSubmit}
        disabled={isLoading || !cat.name || !cat.color || !cat.breed}
      />
    </View>
  );
}

const styles = StyleSheet.create({
  container: {
    flex: 1,
    padding: 20,
    backgroundColor: '#fff',
  },
  title: {
    fontSize: 24,
    fontWeight: 'bold',
    marginBottom: 20,
    textAlign: 'center',
  },
  inputGroup: {
    marginBottom: 20,
  },
  label: {
    fontSize: 16,
    marginBottom: 5,
  },
  input: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 5,
    padding: 10,
    marginBottom: 10,
  },
  picker: {
    borderWidth: 1,
    borderColor: '#ddd',
    borderRadius: 5,
  },
});
